"use client";

import { useEffect, useState, useRef } from "react";
import { useParams, useRouter } from "next/navigation";
import Link from "next/link";
import Image from "next/image";

interface Image {
  id: string;
  url: string;
  fileName: string;
}

interface Message {
  id: string;
  content: string;
  createdAt: string;
  images: Image[];
}

interface Sermon {
  id: string;
  title: string;
  pastor: string;
  date: string;
  messages: Message[];
}

export default function SermonChatPage() {
  const params = useParams();
  const router = useRouter();
  const [sermon, setSermon] = useState<Sermon | null>(null);
  const [loading, setLoading] = useState(true);
  const [newMessage, setNewMessage] = useState("");
  const [uploading, setUploading] = useState(false);
  const [selectedImages, setSelectedImages] = useState<File[]>([]);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (params.id) {
      fetchSermon();
    }
  }, [params.id]);

  useEffect(() => {
    scrollToBottom();
  }, [sermon?.messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const fetchSermon = async () => {
    try {
      const response = await fetch(`/api/sermons/${params.id}`);
      if (!response.ok) {
        router.push("/sermons");
        return;
      }
      const data = await response.json();
      setSermon(data);
    } catch (error) {
      console.error("Error fetching sermon:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleImageSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const filesArray = Array.from(e.target.files);
      setSelectedImages((prev) => [...prev, ...filesArray]);
    }
  };

  const removeImage = (index: number) => {
    setSelectedImages((prev) => prev.filter((_, i) => i !== index));
  };

  const uploadImages = async (): Promise<any[]> => {
    const uploadedImages = [];

    for (const file of selectedImages) {
      const formData = new FormData();
      formData.append("file", file);

      const response = await fetch("/api/upload", {
        method: "POST",
        body: formData,
      });

      if (response.ok) {
        const data = await response.json();
        uploadedImages.push(data);
      }
    }

    return uploadedImages;
  };

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!newMessage.trim() && selectedImages.length === 0) return;

    setUploading(true);

    try {
      let imageUrls: any[] = [];

      // Subir im├ígenes si hay
      if (selectedImages.length > 0) {
        imageUrls = await uploadImages();
      }

      // Crear mensaje
      const response = await fetch(`/api/sermons/${params.id}/messages`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          content: newMessage || "(Imagen adjunta)",
          imageUrls,
        }),
      });

      if (response.ok) {
        setNewMessage("");
        setSelectedImages([]);
        fetchSermon();
      }
    } catch (error) {
      console.error("Error sending message:", error);
      alert("Error al enviar mensaje");
    } finally {
      setUploading(false);
    }
  };

  const formatTime = (dateString: string) => {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat("es-ES", {
      hour: "2-digit",
      minute: "2-digit",
    }).format(date);
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat("es-ES", {
      year: "numeric",
      month: "long",
      day: "numeric",
    }).format(date);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-100 dark:bg-gray-900 flex items-center justify-center">
        <div className="text-xl text-gray-600 dark:text-gray-300">Cargando...</div>
      </div>
    );
  }

  if (!sermon) {
    return (
      <div className="min-h-screen bg-gray-100 dark:bg-gray-900 flex items-center justify-center">
        <div className="text-xl text-gray-600 dark:text-gray-300">Serm├│n no encontrado</div>
      </div>
    );
  }

  return (
    <div className="h-screen flex flex-col bg-gray-100 dark:bg-gray-900">
      {/* Header */}
      <div className="bg-blue-600 dark:bg-blue-800 text-white p-4 shadow-lg">
        <div className="container mx-auto max-w-4xl flex items-center gap-4">
          <Link href="/sermons" className="hover:bg-blue-700 dark:hover:bg-blue-900 p-2 rounded">
            ÔåÉ
          </Link>
          <div className="flex-1">
            <h1 className="text-xl font-bold">{sermon.title}</h1>
            <p className="text-sm text-blue-100">
              Pastor: {sermon.pastor} ÔÇó {formatDate(sermon.date)}
            </p>
          </div>
        </div>
      </div>

      {/* Messages Area */}
      <div className="flex-1 overflow-y-auto p-4 bg-[url('/chat-bg.png')] bg-gray-50 dark:bg-gray-800">
        <div className="container mx-auto max-w-4xl space-y-3">
          {sermon.messages.length === 0 ? (
            <div className="text-center text-gray-500 dark:text-gray-400 py-12">
              <div className="text-4xl mb-2">­ƒÆ¼</div>
              <p>No hay mensajes a├║n. ┬íEscribe el primero!</p>
            </div>
          ) : (
            sermon.messages.map((message) => (
              <div key={message.id} className="flex justify-end">
                <div className="bg-blue-500 text-white rounded-lg p-3 max-w-[80%] shadow">
                  {message.images.length > 0 && (
                    <div className="mb-2 space-y-2">
                      {message.images.map((img) => (
                        <div key={img.id} className="relative">
                          <img
                            src={img.url}
                            alt={img.fileName}
                            className="rounded-lg max-w-full h-auto cursor-pointer"
                            onClick={() => window.open(img.url, "_blank")}
                          />
                        </div>
                      ))}
                    </div>
                  )}
                  <p className="whitespace-pre-wrap break-words">{message.content}</p>
                  <div className="text-xs text-blue-100 mt-1 text-right">
                    {formatTime(message.createdAt)}
                  </div>
                </div>
              </div>
            ))
          )}
          <div ref={messagesEndRef} />
        </div>
      </div>

      {/* Image Preview */}
      {selectedImages.length > 0 && (
        <div className="bg-white dark:bg-gray-800 border-t dark:border-gray-700 p-3">
          <div className="container mx-auto max-w-4xl">
            <div className="flex gap-2 overflow-x-auto">
              {selectedImages.map((file, index) => (
                <div key={index} className="relative flex-shrink-0">
                  <img
                    src={URL.createObjectURL(file)}
                    alt={file.name}
                    className="h-20 w-20 object-cover rounded"
                  />
                  <button
                    onClick={() => removeImage(index)}
                    className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs"
                  >
                    ├ù
                  </button>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Input Area */}
      <div className="bg-white dark:bg-gray-800 border-t dark:border-gray-700 p-4">
        <div className="container mx-auto max-w-4xl">
          <form onSubmit={handleSendMessage} className="flex gap-2">
            <input
              ref={fileInputRef}
              type="file"
              accept="image/*"
              multiple
              onChange={handleImageSelect}
              className="hidden"
            />
            <button
              type="button"
              onClick={() => fileInputRef.current?.click()}
              className="bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 p-3 rounded-lg transition-colors"
              disabled={uploading}
            >
              ­ƒôÄ
            </button>
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder="Escribe tu nota aqu├¡..."
              className="flex-1 p-3 border dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"
              disabled={uploading}
            />
            <button
              type="submit"
              className="bg-blue-600 hover:bg-blue-700 text-white p-3 px-6 rounded-lg transition-colors font-bold disabled:opacity-50"
              disabled={uploading || (!newMessage.trim() && selectedImages.length === 0)}
            >
              {uploading ? "ÔÅ│" : "Ô×ñ"}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}
